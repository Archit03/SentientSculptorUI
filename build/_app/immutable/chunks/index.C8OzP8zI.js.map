{"version":3,"file":"index.C8OzP8zI.js","sources":["../../../../../../node_modules/uuid/dist/esm-browser/rng.js","../../../../../../node_modules/uuid/dist/esm-browser/stringify.js","../../../../../../node_modules/uuid/dist/esm-browser/native.js","../../../../../../node_modules/uuid/dist/esm-browser/v4.js","../../../../../../src/lib/types/index.ts","../../../../../../src/lib/utils/index.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","export type Banner = {\n\tid: string;\n\ttype: string;\n\ttitle?: string;\n\tcontent: string;\n\turl?: string;\n\tdismissible?: boolean;\n\ttimestamp: number;\n};\n\nexport enum TTS_RESPONSE_SPLIT {\n\tPUNCTUATION = 'punctuation',\n\tPARAGRAPHS = 'paragraphs',\n\tNONE = 'none'\n}\n","import { v4 as uuidv4 } from 'uuid';\nimport sha256 from 'js-sha256';\n\nimport { WEBUI_BASE_URL } from '$lib/constants';\nimport { TTS_RESPONSE_SPLIT } from '$lib/types';\n\n//////////////////////////\n// Helper functions\n//////////////////////////\n\nconst convertLatexToSingleLine = (content) => {\n\t// Patterns to match multiline LaTeX blocks\n\tconst patterns = [\n\t\t/(\\$\\$\\s[\\s\\S]*?\\s\\$\\$)/g, // Match $$ ... $$\n\t\t/(\\\\\\[[\\s\\S]*?\\\\\\])/g, // Match \\[ ... \\]\n\t\t/(\\\\begin\\{[a-z]+\\}[\\s\\S]*?\\\\end\\{[a-z]+\\})/g // Match \\begin{...} ... \\end{...}\n\t];\n\n\tpatterns.forEach((pattern) => {\n\t\tcontent = content.replace(pattern, (match) => {\n\t\t\treturn match.replace(/\\s*\\n\\s*/g, ' ').trim();\n\t\t});\n\t});\n\n\treturn content;\n};\n\nexport const replaceTokens = (content, char, user) => {\n\tconst charToken = /{{char}}/gi;\n\tconst userToken = /{{user}}/gi;\n\tconst videoIdToken = /{{VIDEO_FILE_ID_([a-f0-9-]+)}}/gi; // Regex to capture the video ID\n\tconst htmlIdToken = /{{HTML_FILE_ID_([a-f0-9-]+)}}/gi; // Regex to capture the HTML ID\n\n\t// Replace {{char}} if char is provided\n\tif (char !== undefined && char !== null) {\n\t\tcontent = content.replace(charToken, char);\n\t}\n\n\t// Replace {{user}} if user is provided\n\tif (user !== undefined && user !== null) {\n\t\tcontent = content.replace(userToken, user);\n\t}\n\n\t// Replace video ID tags with corresponding <video> elements\n\tcontent = content.replace(videoIdToken, (match, fileId) => {\n\t\tconst videoUrl = `${WEBUI_BASE_URL}/api/v1/files/${fileId}/content`;\n\t\treturn `<video src=\"${videoUrl}\" controls></video>`;\n\t});\n\n\t// Replace HTML ID tags with corresponding HTML content\n\tcontent = content.replace(htmlIdToken, (match, fileId) => {\n\t\tconst htmlUrl = `${WEBUI_BASE_URL}/api/v1/files/${fileId}/content`;\n\t\treturn `<iframe src=\"${htmlUrl}\" width=\"100%\" frameborder=\"0\" onload=\"this.style.height=(this.contentWindow.document.body.scrollHeight+20)+'px';\"></iframe>`;\n\t});\n\n\treturn content;\n};\n\nexport const sanitizeResponseContent = (content: string) => {\n\treturn content\n\t\t.replace(/<\\|[a-z]*$/, '')\n\t\t.replace(/<\\|[a-z]+\\|$/, '')\n\t\t.replace(/<$/, '')\n\t\t.replaceAll(/<\\|[a-z]+\\|>/g, ' ')\n\t\t.replaceAll('<', '&lt;')\n\t\t.replaceAll('>', '&gt;')\n\t\t.trim();\n};\n\nexport const processResponseContent = (content: string) => {\n\tcontent = convertLatexToSingleLine(content);\n\treturn content.trim();\n};\n\nexport const revertSanitizedResponseContent = (content: string) => {\n\treturn content.replaceAll('&lt;', '<').replaceAll('&gt;', '>');\n};\n\nexport function unescapeHtml(html: string) {\n\tconst doc = new DOMParser().parseFromString(html, 'text/html');\n\treturn doc.documentElement.textContent;\n}\n\nexport const capitalizeFirstLetter = (string) => {\n\treturn string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nexport const splitStream = (splitOn) => {\n\tlet buffer = '';\n\treturn new TransformStream({\n\t\ttransform(chunk, controller) {\n\t\t\tbuffer += chunk;\n\t\t\tconst parts = buffer.split(splitOn);\n\t\t\tparts.slice(0, -1).forEach((part) => controller.enqueue(part));\n\t\t\tbuffer = parts[parts.length - 1];\n\t\t},\n\t\tflush(controller) {\n\t\t\tif (buffer) controller.enqueue(buffer);\n\t\t}\n\t});\n};\n\nexport const convertMessagesToHistory = (messages) => {\n\tconst history = {\n\t\tmessages: {},\n\t\tcurrentId: null\n\t};\n\n\tlet parentMessageId = null;\n\tlet messageId = null;\n\n\tfor (const message of messages) {\n\t\tmessageId = uuidv4();\n\n\t\tif (parentMessageId !== null) {\n\t\t\thistory.messages[parentMessageId].childrenIds = [\n\t\t\t\t...history.messages[parentMessageId].childrenIds,\n\t\t\t\tmessageId\n\t\t\t];\n\t\t}\n\n\t\thistory.messages[messageId] = {\n\t\t\t...message,\n\t\t\tid: messageId,\n\t\t\tparentId: parentMessageId,\n\t\t\tchildrenIds: []\n\t\t};\n\n\t\tparentMessageId = messageId;\n\t}\n\n\thistory.currentId = messageId;\n\treturn history;\n};\n\nexport const getGravatarURL = (email) => {\n\t// Trim leading and trailing whitespace from\n\t// an email address and force all characters\n\t// to lower case\n\tconst address = String(email).trim().toLowerCase();\n\n\t// Create a SHA256 hash of the final string\n\tconst hash = sha256(address);\n\n\t// Grab the actual image URL\n\treturn `https://www.gravatar.com/avatar/${hash}`;\n};\n\nexport const canvasPixelTest = () => {\n\t// Test a 1x1 pixel to potentially identify browser/plugin fingerprint blocking or spoofing\n\t// Inspiration: https://github.com/kkapsner/CanvasBlocker/blob/master/test/detectionTest.js\n\tconst canvas = document.createElement('canvas');\n\tconst ctx = canvas.getContext('2d');\n\tcanvas.height = 1;\n\tcanvas.width = 1;\n\tconst imageData = new ImageData(canvas.width, canvas.height);\n\tconst pixelValues = imageData.data;\n\n\t// Generate RGB test data\n\tfor (let i = 0; i < imageData.data.length; i += 1) {\n\t\tif (i % 4 !== 3) {\n\t\t\tpixelValues[i] = Math.floor(256 * Math.random());\n\t\t} else {\n\t\t\tpixelValues[i] = 255;\n\t\t}\n\t}\n\n\tctx.putImageData(imageData, 0, 0);\n\tconst p = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n\n\t// Read RGB data and fail if unmatched\n\tfor (let i = 0; i < p.length; i += 1) {\n\t\tif (p[i] !== pixelValues[i]) {\n\t\t\tconsole.log(\n\t\t\t\t'canvasPixelTest: Wrong canvas pixel RGB value detected:',\n\t\t\t\tp[i],\n\t\t\t\t'at:',\n\t\t\t\ti,\n\t\t\t\t'expected:',\n\t\t\t\tpixelValues[i]\n\t\t\t);\n\t\t\tconsole.log('canvasPixelTest: Canvas blocking or spoofing is likely');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\nexport const generateInitialsImage = (name) => {\n\tconst canvas = document.createElement('canvas');\n\tconst ctx = canvas.getContext('2d');\n\tcanvas.width = 100;\n\tcanvas.height = 100;\n\n\tif (!canvasPixelTest()) {\n\t\tconsole.log(\n\t\t\t'generateInitialsImage: failed pixel test, fingerprint evasion is likely. Using default image.'\n\t\t);\n\t\treturn '/user.png';\n\t}\n\n\tctx.fillStyle = '#F39C12';\n\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\n\tctx.fillStyle = '#FFFFFF';\n\tctx.font = '40px Helvetica';\n\tctx.textAlign = 'center';\n\tctx.textBaseline = 'middle';\n\n\tconst sanitizedName = name.trim();\n\tconst initials =\n\t\tsanitizedName.length > 0\n\t\t\t? sanitizedName[0] +\n\t\t\t\t(sanitizedName.split(' ').length > 1\n\t\t\t\t\t? sanitizedName[sanitizedName.lastIndexOf(' ') + 1]\n\t\t\t\t\t: '')\n\t\t\t: '';\n\n\tctx.fillText(initials.toUpperCase(), canvas.width / 2, canvas.height / 2);\n\n\treturn canvas.toDataURL();\n};\n\nexport const copyToClipboard = async (text) => {\n\tlet result = false;\n\tif (!navigator.clipboard) {\n\t\tconst textArea = document.createElement('textarea');\n\t\ttextArea.value = text;\n\n\t\t// Avoid scrolling to bottom\n\t\ttextArea.style.top = '0';\n\t\ttextArea.style.left = '0';\n\t\ttextArea.style.position = 'fixed';\n\n\t\tdocument.body.appendChild(textArea);\n\t\ttextArea.focus();\n\t\ttextArea.select();\n\n\t\ttry {\n\t\t\tconst successful = document.execCommand('copy');\n\t\t\tconst msg = successful ? 'successful' : 'unsuccessful';\n\t\t\tconsole.log('Fallback: Copying text command was ' + msg);\n\t\t\tresult = true;\n\t\t} catch (err) {\n\t\t\tconsole.error('Fallback: Oops, unable to copy', err);\n\t\t}\n\n\t\tdocument.body.removeChild(textArea);\n\t\treturn result;\n\t}\n\n\tresult = await navigator.clipboard\n\t\t.writeText(text)\n\t\t.then(() => {\n\t\t\tconsole.log('Async: Copying to clipboard was successful!');\n\t\t\treturn true;\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Async: Could not copy text: ', error);\n\t\t\treturn false;\n\t\t});\n\n\treturn result;\n};\n\nexport const compareVersion = (latest, current) => {\n\treturn current === '0.0.0'\n\t\t? false\n\t\t: current.localeCompare(latest, undefined, {\n\t\t\t\tnumeric: true,\n\t\t\t\tsensitivity: 'case',\n\t\t\t\tcaseFirst: 'upper'\n\t\t\t}) < 0;\n};\n\nexport const findWordIndices = (text) => {\n\tconst regex = /\\[([^\\]]+)\\]/g;\n\tconst matches = [];\n\tlet match;\n\n\twhile ((match = regex.exec(text)) !== null) {\n\t\tmatches.push({\n\t\t\tword: match[1],\n\t\t\tstartIndex: match.index,\n\t\t\tendIndex: regex.lastIndex - 1\n\t\t});\n\t}\n\n\treturn matches;\n};\n\nexport const removeLastWordFromString = (inputString, wordString) => {\n\t// Split the string into an array of words\n\tconst words = inputString.split(' ');\n\n\tif (words.at(-1) === wordString) {\n\t\twords.pop();\n\t}\n\n\t// Join the remaining words back into a string\n\tlet resultString = words.join(' ');\n\tif (resultString !== '') {\n\t\tresultString += ' ';\n\t}\n\n\treturn resultString;\n};\n\nexport const removeFirstHashWord = (inputString) => {\n\t// Split the string into an array of words\n\tconst words = inputString.split(' ');\n\n\t// Find the index of the first word that starts with #\n\tconst index = words.findIndex((word) => word.startsWith('#'));\n\n\t// Remove the first word with #\n\tif (index !== -1) {\n\t\twords.splice(index, 1);\n\t}\n\n\t// Join the remaining words back into a string\n\tconst resultString = words.join(' ');\n\n\treturn resultString;\n};\n\nexport const transformFileName = (fileName) => {\n\t// Convert to lowercase\n\tconst lowerCaseFileName = fileName.toLowerCase();\n\n\t// Remove special characters using regular expression\n\tconst sanitizedFileName = lowerCaseFileName.replace(/[^\\w\\s]/g, '');\n\n\t// Replace spaces with dashes\n\tconst finalFileName = sanitizedFileName.replace(/\\s+/g, '-');\n\n\treturn finalFileName;\n};\n\nexport const calculateSHA256 = async (file) => {\n\t// Create a FileReader to read the file asynchronously\n\tconst reader = new FileReader();\n\n\t// Define a promise to handle the file reading\n\tconst readFile = new Promise((resolve, reject) => {\n\t\treader.onload = () => resolve(reader.result);\n\t\treader.onerror = reject;\n\t});\n\n\t// Read the file as an ArrayBuffer\n\treader.readAsArrayBuffer(file);\n\n\ttry {\n\t\t// Wait for the FileReader to finish reading the file\n\t\tconst buffer = await readFile;\n\n\t\t// Convert the ArrayBuffer to a Uint8Array\n\t\tconst uint8Array = new Uint8Array(buffer);\n\n\t\t// Calculate the SHA-256 hash using Web Crypto API\n\t\tconst hashBuffer = await crypto.subtle.digest('SHA-256', uint8Array);\n\n\t\t// Convert the hash to a hexadecimal string\n\t\tconst hashArray = Array.from(new Uint8Array(hashBuffer));\n\t\tconst hashHex = hashArray.map((byte) => byte.toString(16).padStart(2, '0')).join('');\n\n\t\treturn `${hashHex}`;\n\t} catch (error) {\n\t\tconsole.error('Error calculating SHA-256 hash:', error);\n\t\tthrow error;\n\t}\n};\n\nexport const getImportOrigin = (_chats) => {\n\t// Check what external service chat imports are from\n\tif ('mapping' in _chats[0]) {\n\t\treturn 'openai';\n\t}\n\treturn 'webui';\n};\n\nexport const getUserPosition = async (raw = false) => {\n\t// Get the user's location using the Geolocation API\n\tconst position = await new Promise((resolve, reject) => {\n\t\tnavigator.geolocation.getCurrentPosition(resolve, reject);\n\t}).catch((error) => {\n\t\tconsole.error('Error getting user location:', error);\n\t\tthrow error;\n\t});\n\n\tif (!position) {\n\t\treturn 'Location not available';\n\t}\n\n\t// Extract the latitude and longitude from the position\n\tconst { latitude, longitude } = position.coords;\n\n\tif (raw) {\n\t\treturn { latitude, longitude };\n\t} else {\n\t\treturn `${latitude.toFixed(3)}, ${longitude.toFixed(3)} (lat, long)`;\n\t}\n};\n\nconst convertOpenAIMessages = (convo) => {\n\t// Parse OpenAI chat messages and create chat dictionary for creating new chats\n\tconst mapping = convo['mapping'];\n\tconst messages = [];\n\tlet currentId = '';\n\tlet lastId = null;\n\n\tfor (const message_id in mapping) {\n\t\tconst message = mapping[message_id];\n\t\tcurrentId = message_id;\n\t\ttry {\n\t\t\tif (\n\t\t\t\tmessages.length == 0 &&\n\t\t\t\t(message['message'] == null ||\n\t\t\t\t\t(message['message']['content']['parts']?.[0] == '' &&\n\t\t\t\t\t\tmessage['message']['content']['text'] == null))\n\t\t\t) {\n\t\t\t\t// Skip chat messages with no content\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\tconst new_chat = {\n\t\t\t\t\tid: message_id,\n\t\t\t\t\tparentId: lastId,\n\t\t\t\t\tchildrenIds: message['children'] || [],\n\t\t\t\t\trole: message['message']?.['author']?.['role'] !== 'user' ? 'assistant' : 'user',\n\t\t\t\t\tcontent:\n\t\t\t\t\t\tmessage['message']?.['content']?.['parts']?.[0] ||\n\t\t\t\t\t\tmessage['message']?.['content']?.['text'] ||\n\t\t\t\t\t\t'',\n\t\t\t\t\tmodel: 'gpt-3.5-turbo',\n\t\t\t\t\tdone: true,\n\t\t\t\t\tcontext: null\n\t\t\t\t};\n\t\t\t\tmessages.push(new_chat);\n\t\t\t\tlastId = currentId;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tconsole.log('Error with', message, '\\nError:', error);\n\t\t}\n\t}\n\n\tconst history: Record<PropertyKey, (typeof messages)[number]> = {};\n\tmessages.forEach((obj) => (history[obj.id] = obj));\n\n\tconst chat = {\n\t\thistory: {\n\t\t\tcurrentId: currentId,\n\t\t\tmessages: history // Need to convert this to not a list and instead a json object\n\t\t},\n\t\tmodels: ['gpt-3.5-turbo'],\n\t\tmessages: messages,\n\t\toptions: {},\n\t\ttimestamp: convo['create_time'],\n\t\ttitle: convo['title'] ?? 'New Chat'\n\t};\n\treturn chat;\n};\n\nconst validateChat = (chat) => {\n\t// Because ChatGPT sometimes has features we can't use like DALL-E or migh have corrupted messages, need to validate\n\tconst messages = chat.messages;\n\n\t// Check if messages array is empty\n\tif (messages.length === 0) {\n\t\treturn false;\n\t}\n\n\t// Last message's children should be an empty array\n\tconst lastMessage = messages[messages.length - 1];\n\tif (lastMessage.childrenIds.length !== 0) {\n\t\treturn false;\n\t}\n\n\t// First message's parent should be null\n\tconst firstMessage = messages[0];\n\tif (firstMessage.parentId !== null) {\n\t\treturn false;\n\t}\n\n\t// Every message's content should be a string\n\tfor (const message of messages) {\n\t\tif (typeof message.content !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n};\n\nexport const convertOpenAIChats = (_chats) => {\n\t// Create a list of dictionaries with each conversation from import\n\tconst chats = [];\n\tlet failed = 0;\n\tfor (const convo of _chats) {\n\t\tconst chat = convertOpenAIMessages(convo);\n\n\t\tif (validateChat(chat)) {\n\t\t\tchats.push({\n\t\t\t\tid: convo['id'],\n\t\t\t\tuser_id: '',\n\t\t\t\ttitle: convo['title'],\n\t\t\t\tchat: chat,\n\t\t\t\ttimestamp: convo['timestamp']\n\t\t\t});\n\t\t} else {\n\t\t\tfailed++;\n\t\t}\n\t}\n\tconsole.log(failed, 'Conversations could not be imported');\n\treturn chats;\n};\n\nexport const isValidHttpUrl = (string: string) => {\n\tlet url;\n\n\ttry {\n\t\turl = new URL(string);\n\t} catch (_) {\n\t\treturn false;\n\t}\n\n\treturn url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const removeEmojis = (str: string) => {\n\t// Regular expression to match emojis\n\tconst emojiRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDE4F]/g;\n\n\t// Replace emojis with an empty string\n\treturn str.replace(emojiRegex, '');\n};\n\nexport const removeFormattings = (str: string) => {\n\treturn str.replace(/(\\*)(.*?)\\1/g, '').replace(/(```)(.*?)\\1/gs, '');\n};\n\nexport const cleanText = (content: string) => {\n\treturn removeFormattings(removeEmojis(content.trim()));\n};\n\n// This regular expression matches code blocks marked by triple backticks\nconst codeBlockRegex = /```[\\s\\S]*?```/g;\n\nexport const extractSentences = (text: string) => {\n\tconst codeBlocks: string[] = [];\n\tlet index = 0;\n\n\t// Temporarily replace code blocks with placeholders and store the blocks separately\n\ttext = text.replace(codeBlockRegex, (match) => {\n\t\tconst placeholder = `\\u0000${index}\\u0000`; // Use a unique placeholder\n\t\tcodeBlocks[index++] = match;\n\t\treturn placeholder;\n\t});\n\n\t// Split the modified text into sentences based on common punctuation marks, avoiding these blocks\n\tlet sentences = text.split(/(?<=[.!?])\\s+/);\n\n\t// Restore code blocks and process sentences\n\tsentences = sentences.map((sentence) => {\n\t\t// Check if the sentence includes a placeholder for a code block\n\t\treturn sentence.replace(/\\u0000(\\d+)\\u0000/g, (_, idx) => codeBlocks[idx]);\n\t});\n\n\treturn sentences.map(cleanText).filter(Boolean);\n};\n\nexport const extractParagraphsForAudio = (text: string) => {\n\tconst codeBlocks: string[] = [];\n\tlet index = 0;\n\n\t// Temporarily replace code blocks with placeholders and store the blocks separately\n\ttext = text.replace(codeBlockRegex, (match) => {\n\t\tconst placeholder = `\\u0000${index}\\u0000`; // Use a unique placeholder\n\t\tcodeBlocks[index++] = match;\n\t\treturn placeholder;\n\t});\n\n\t// Split the modified text into paragraphs based on newlines, avoiding these blocks\n\tlet paragraphs = text.split(/\\n+/);\n\n\t// Restore code blocks and process paragraphs\n\tparagraphs = paragraphs.map((paragraph) => {\n\t\t// Check if the paragraph includes a placeholder for a code block\n\t\treturn paragraph.replace(/\\u0000(\\d+)\\u0000/g, (_, idx) => codeBlocks[idx]);\n\t});\n\n\treturn paragraphs.map(cleanText).filter(Boolean);\n};\n\nexport const extractSentencesForAudio = (text: string) => {\n\treturn extractSentences(text).reduce((mergedTexts, currentText) => {\n\t\tconst lastIndex = mergedTexts.length - 1;\n\t\tif (lastIndex >= 0) {\n\t\t\tconst previousText = mergedTexts[lastIndex];\n\t\t\tconst wordCount = previousText.split(/\\s+/).length;\n\t\t\tconst charCount = previousText.length;\n\t\t\tif (wordCount < 4 || charCount < 50) {\n\t\t\t\tmergedTexts[lastIndex] = previousText + ' ' + currentText;\n\t\t\t} else {\n\t\t\t\tmergedTexts.push(currentText);\n\t\t\t}\n\t\t} else {\n\t\t\tmergedTexts.push(currentText);\n\t\t}\n\t\treturn mergedTexts;\n\t}, [] as string[]);\n};\n\nexport const getMessageContentParts = (content: string, split_on: string = 'punctuation') => {\n\tconst messageContentParts: string[] = [];\n\n\tswitch (split_on) {\n\t\tdefault:\n\t\tcase TTS_RESPONSE_SPLIT.PUNCTUATION:\n\t\t\tmessageContentParts.push(...extractSentencesForAudio(content));\n\t\t\tbreak;\n\t\tcase TTS_RESPONSE_SPLIT.PARAGRAPHS:\n\t\t\tmessageContentParts.push(...extractParagraphsForAudio(content));\n\t\t\tbreak;\n\t\tcase TTS_RESPONSE_SPLIT.NONE:\n\t\t\tmessageContentParts.push(cleanText(content));\n\t\t\tbreak;\n\t}\n\n\treturn messageContentParts;\n};\n\nexport const blobToFile = (blob, fileName) => {\n\t// Create a new File object from the Blob\n\tconst file = new File([blob], fileName, { type: blob.type });\n\treturn file;\n};\n\n/**\n * @param {string} template - The template string containing placeholders.\n * @returns {string} The template string with the placeholders replaced by the prompt.\n */\nexport const promptTemplate = (\n\ttemplate: string,\n\tuser_name?: string,\n\tuser_location?: string\n): string => {\n\t// Get the current date\n\tconst currentDate = new Date();\n\n\t// Format the date to YYYY-MM-DD\n\tconst formattedDate =\n\t\tcurrentDate.getFullYear() +\n\t\t'-' +\n\t\tString(currentDate.getMonth() + 1).padStart(2, '0') +\n\t\t'-' +\n\t\tString(currentDate.getDate()).padStart(2, '0');\n\n\t// Format the time to HH:MM:SS AM/PM\n\tconst currentTime = currentDate.toLocaleTimeString('en-US', {\n\t\thour: 'numeric',\n\t\tminute: 'numeric',\n\t\tsecond: 'numeric',\n\t\thour12: true\n\t});\n\n\t// Replace {{CURRENT_DATETIME}} in the template with the formatted datetime\n\ttemplate = template.replace('{{CURRENT_DATETIME}}', `${formattedDate} ${currentTime}`);\n\n\t// Replace {{CURRENT_DATE}} in the template with the formatted date\n\ttemplate = template.replace('{{CURRENT_DATE}}', formattedDate);\n\n\t// Replace {{CURRENT_TIME}} in the template with the formatted time\n\ttemplate = template.replace('{{CURRENT_TIME}}', currentTime);\n\n\tif (user_name) {\n\t\t// Replace {{USER_NAME}} in the template with the user's name\n\t\ttemplate = template.replace('{{USER_NAME}}', user_name);\n\t}\n\n\tif (user_location) {\n\t\t// Replace {{USER_LOCATION}} in the template with the current location\n\t\ttemplate = template.replace('{{USER_LOCATION}}', user_location);\n\t}\n\n\treturn template;\n};\n\n/**\n * This function is used to replace placeholders in a template string with the provided prompt.\n * The placeholders can be in the following formats:\n * - `{{prompt}}`: This will be replaced with the entire prompt.\n * - `{{prompt:start:<length>}}`: This will be replaced with the first <length> characters of the prompt.\n * - `{{prompt:end:<length>}}`: This will be replaced with the last <length> characters of the prompt.\n * - `{{prompt:middletruncate:<length>}}`: This will be replaced with the prompt truncated to <length> characters, with '...' in the middle.\n *\n * @param {string} template - The template string containing placeholders.\n * @param {string} prompt - The string to replace the placeholders with.\n * @returns {string} The template string with the placeholders replaced by the prompt.\n */\nexport const titleGenerationTemplate = (template: string, prompt: string): string => {\n\ttemplate = template.replace(\n\t\t/{{prompt}}|{{prompt:start:(\\d+)}}|{{prompt:end:(\\d+)}}|{{prompt:middletruncate:(\\d+)}}/g,\n\t\t(match, startLength, endLength, middleLength) => {\n\t\t\tif (match === '{{prompt}}') {\n\t\t\t\treturn prompt;\n\t\t\t} else if (match.startsWith('{{prompt:start:')) {\n\t\t\t\treturn prompt.substring(0, startLength);\n\t\t\t} else if (match.startsWith('{{prompt:end:')) {\n\t\t\t\treturn prompt.slice(-endLength);\n\t\t\t} else if (match.startsWith('{{prompt:middletruncate:')) {\n\t\t\t\tif (prompt.length <= middleLength) {\n\t\t\t\t\treturn prompt;\n\t\t\t\t}\n\t\t\t\tconst start = prompt.slice(0, Math.ceil(middleLength / 2));\n\t\t\t\tconst end = prompt.slice(-Math.floor(middleLength / 2));\n\t\t\t\treturn `${start}...${end}`;\n\t\t\t}\n\t\t\treturn '';\n\t\t}\n\t);\n\n\ttemplate = promptTemplate(template);\n\n\treturn template;\n};\n\nexport const approximateToHumanReadable = (nanoseconds: number) => {\n\tconst seconds = Math.floor((nanoseconds / 1e9) % 60);\n\tconst minutes = Math.floor((nanoseconds / 6e10) % 60);\n\tconst hours = Math.floor((nanoseconds / 3.6e12) % 24);\n\n\tconst results: string[] = [];\n\n\tif (seconds >= 0) {\n\t\tresults.push(`${seconds}s`);\n\t}\n\n\tif (minutes > 0) {\n\t\tresults.push(`${minutes}m`);\n\t}\n\n\tif (hours > 0) {\n\t\tresults.push(`${hours}h`);\n\t}\n\n\treturn results.reverse().join(' ');\n};\n\nexport const getTimeRange = (timestamp) => {\n\tconst now = new Date();\n\tconst date = new Date(timestamp * 1000); // Convert Unix timestamp to milliseconds\n\n\t// Calculate the difference in milliseconds\n\tconst diffTime = now.getTime() - date.getTime();\n\tconst diffDays = diffTime / (1000 * 3600 * 24);\n\n\tconst nowDate = now.getDate();\n\tconst nowMonth = now.getMonth();\n\tconst nowYear = now.getFullYear();\n\n\tconst dateDate = date.getDate();\n\tconst dateMonth = date.getMonth();\n\tconst dateYear = date.getFullYear();\n\n\tif (nowYear === dateYear && nowMonth === dateMonth && nowDate === dateDate) {\n\t\treturn 'Today';\n\t} else if (nowYear === dateYear && nowMonth === dateMonth && nowDate - dateDate === 1) {\n\t\treturn 'Yesterday';\n\t} else if (diffDays <= 7) {\n\t\treturn 'Previous 7 days';\n\t} else if (diffDays <= 30) {\n\t\treturn 'Previous 30 days';\n\t} else if (nowYear === dateYear) {\n\t\treturn date.toLocaleString('default', { month: 'long' });\n\t} else {\n\t\treturn date.getFullYear().toString();\n\t}\n};\n\n/**\n * Extract frontmatter as a dictionary from the specified content string.\n * @param content {string} - The content string with potential frontmatter.\n * @returns {Object} - The extracted frontmatter as a dictionary.\n */\nexport const extractFrontmatter = (content) => {\n\tconst frontmatter = {};\n\tlet frontmatterStarted = false;\n\tlet frontmatterEnded = false;\n\tconst frontmatterPattern = /^\\s*([a-z_]+):\\s*(.*)\\s*$/i;\n\n\t// Split content into lines\n\tconst lines = content.split('\\n');\n\n\t// Check if the content starts with triple quotes\n\tif (lines[0].trim() !== '\"\"\"') {\n\t\treturn {};\n\t}\n\n\tfrontmatterStarted = true;\n\n\tfor (let i = 1; i < lines.length; i++) {\n\t\tconst line = lines[i];\n\n\t\tif (line.includes('\"\"\"')) {\n\t\t\tif (frontmatterStarted) {\n\t\t\t\tfrontmatterEnded = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (frontmatterStarted && !frontmatterEnded) {\n\t\t\tconst match = frontmatterPattern.exec(line);\n\t\t\tif (match) {\n\t\t\t\tconst [, key, value] = match;\n\t\t\t\tfrontmatter[key.trim()] = value.trim();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn frontmatter;\n};\n\n// Function to determine the best matching language\nexport const bestMatchingLanguage = (supportedLanguages, preferredLanguages, defaultLocale) => {\n\tconst languages = supportedLanguages.map((lang) => lang.code);\n\n\tconst match = preferredLanguages\n\t\t.map((prefLang) => languages.find((lang) => lang.startsWith(prefLang)))\n\t\t.find(Boolean);\n\n\tconsole.log(languages, preferredLanguages, match, defaultLocale);\n\treturn match || defaultLocale;\n};\n"],"names":["getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","TTS_RESPONSE_SPLIT","convertLatexToSingleLine","content","pattern","match","replaceTokens","char","user","charToken","userToken","videoIdToken","htmlIdToken","fileId","WEBUI_BASE_URL","sanitizeResponseContent","processResponseContent","revertSanitizedResponseContent","unescapeHtml","html","splitStream","splitOn","buffer","chunk","controller","parts","part","convertMessagesToHistory","messages","history","parentMessageId","messageId","message","uuidv4","canvasPixelTest","canvas","ctx","imageData","pixelValues","p","generateInitialsImage","name","sanitizedName","initials","copyToClipboard","text","result","textArea","msg","err","error","compareVersion","latest","current","findWordIndices","regex","matches","removeLastWordFromString","inputString","wordString","words","resultString","transformFileName","fileName","getImportOrigin","_chats","getUserPosition","raw","position","resolve","reject","latitude","longitude","convertOpenAIMessages","convo","mapping","currentId","lastId","message_id","_a","new_chat","_c","_b","_f","_e","_d","_h","_g","obj","validateChat","chat","convertOpenAIChats","chats","failed","isValidHttpUrl","string","url","removeEmojis","str","emojiRegex","removeFormattings","cleanText","codeBlockRegex","extractSentences","codeBlocks","index","placeholder","sentences","sentence","_","idx","extractParagraphsForAudio","paragraphs","paragraph","extractSentencesForAudio","mergedTexts","currentText","lastIndex","previousText","wordCount","charCount","getMessageContentParts","split_on","messageContentParts","blobToFile","blob","promptTemplate","template","user_name","user_location","currentDate","formattedDate","currentTime","approximateToHumanReadable","nanoseconds","seconds","minutes","hours","results","getTimeRange","timestamp","now","date","diffDays","nowDate","nowMonth","nowYear","dateDate","dateMonth","dateYear","extractFrontmatter","frontmatter","frontmatterStarted","frontmatterEnded","frontmatterPattern","lines","line","key","value","bestMatchingLanguage","supportedLanguages","preferredLanguages","defaultLocale","languages","lang","prefLang"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}