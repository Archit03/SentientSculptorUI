ARG USE_CUDA=false
ARG USE_OLLAMA=false
ARG USE_CUDA_VER=cu121
ARG USE_EMBEDDING_MODEL=text-embedding-3-small
ARG USE_RERANKING_MODEL=""
ARG UID=0
ARG GID=0

######## WebUI frontend ########
# Use a base node image to copy pre-built frontend files
FROM node:21-alpine3.19 as frontend
WORKDIR /app
COPY ./build /app/build
COPY package.json package-lock.json ./

######## WebUI backend ########
FROM python:3.11-slim-bookworm as backend

# Use args
ARG USE_CUDA
ARG USE_OLLAMA
ARG USE_CUDA_VER
ARG USE_EMBEDDING_MODEL
ARG USE_RERANKING_MODEL
ARG UID
ARG GID

# Set environment variables
ENV ENV=prod \
    PORT=8080 \
    USE_OLLAMA_DOCKER=${USE_OLLAMA} \
    USE_CUDA_DOCKER=${USE_CUDA} \
    USE_CUDA_DOCKER_VER=${USE_CUDA_VER} \
    USE_EMBEDDING_MODEL_DOCKER=${USE_EMBEDDING_MODEL} \
    USE_RERANKING_MODEL_DOCKER=${USE_RERANKING_MODEL} \
    OLLAMA_BASE_URL="/ollama" \
    OPENAI_API_BASE_URL="" \
    OPENAI_API_KEY="" \
    WEBUI_SECRET_KEY="" \
    SCARF_NO_ANALYTICS=true \
    DO_NOT_TRACK=true \
    ANONYMIZED_TELEMETRY=false \
    WHISPER_MODEL="base" \
    WHISPER_MODEL_DIR="/app/backend/data/cache/whisper/models" \
    RAG_EMBEDDING_MODEL="$USE_EMBEDDING_MODEL_DOCKER" \
    RAG_RERANKING_MODEL="$USE_RERANKING_MODEL_DOCKER" \
    SENTENCE_TRANSFORMERS_HOME="/app/backend/data/cache/embedding/models" \
    HF_HOME="/app/backend/data/cache/embedding/models"

WORKDIR /app/backend

# Create user and group if not root
RUN if [ $UID -ne 0 ]; then \
        if [ $GID -ne 0 ]; then \
            addgroup --gid $GID app; \
        fi; \
        adduser --uid $UID --gid $GID --home /root --disabled-password --no-create-home app; \
    fi

# Install necessary packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends pandoc netcat-openbsd curl jq gcc python3-dev ffmpeg libsm6 libxext6 && \
    if [ "$USE_OLLAMA" = "true" ]; then \
        curl -fsSL https://ollama.com/install.sh | sh; \
    fi && \
    rm -rf /var/lib/apt/lists/*

# Install python dependencies
COPY --chown=$UID:$GID ./backend/requirements.txt ./requirements.txt
RUN pip3 install -r requirements.txt && \
    if [ "$USE_CUDA" = "true" ]; then \
        pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/$USE_CUDA_DOCKER_VER; \
    else \
        pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu; \
    fi

# Copy backend files
COPY --chown=$UID:$GID ./backend .

# Copy built frontend files from the frontend stage
COPY --from=frontend --chown=$UID:$GID /app/build /app/build

EXPOSE 8080

HEALTHCHECK CMD curl --silent --fail http://localhost:${PORT:-8080}/health | jq -ne 'input.status == true' || exit 1

USER $UID:$GID

CMD ["bash", "start.sh"]
